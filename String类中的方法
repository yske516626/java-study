import java.util.Locale;

//String类中的方法
public class StringThree {
    public static void main(String[] args) {
        //charAT() -- 返回 char指定索引处的值
        char c = "中国人".charAt(1);
        System.out.println(c);

        //compareTo(String anotherString)--按字典顺序比较两个字符串。
        int result1 = "abc".compareTo("abc");
        System.out.println(result1);//0
        int result2 = "abcd".compareTo("abce");
        System.out.println(result2);//-1
        int result3 = "abce".compareTo("abcd");
        System.out.println(result3);//1
        //拿着字符串和第一个字面进行比较，分不出就拿第二个，直到分出大小
        System.out.println("xyz".compareTo("yxz")); //-1

        //contains(CharSequence s)
        //当且仅当此字符串包含指定的char值序列时才返回true。
        System.out.println("HelloWorld.java".contains(".java"));//ture

        //endsWith(String suffix)
        //测试此字符串是否以指定的后缀结尾。
        System.out.println("text.txt".endsWith(".java")); //false

        //equalsIgnoreCase(String anotherString) -- boolean
        //判断两个字符串是否相等，并且同时忽略大小写
        System.out.println("ABC".equalsIgnoreCase("abc"));//ture

        //getBytes() --byte[]
        //将字符串对象转换成字节数组
        byte[] bytes = "abcdef".getBytes();
        for(int i = 0;i<bytes.length;i++){
            System.out.print(bytes[i]);
        }

        //indexOf(int ch)
        //返回指定字符第一次出现的字符串内的索引。
        System.out.println("studyjava".indexOf("java"));//5

        //isEmpty() --boolean
        //判断某个字符串是否为空字符串，底层源代码调用的应该是字符串的length（）方法
        String s = "";
        System.out.println(s.isEmpty());//ture

        //length（）--int
        //求字符串长度
        //判断数组长度和判断字符串长度不一样
        //判断数组长度是length属性，判断字符串长度是length（）方法
        System.out.println("avd".length());//3


        //lastIndexOf(int ch) --int
        //返回指定字符的最后一次出现的字符串中的索引
        System.out.println("studyjavaforwardjavabook".lastIndexOf("java"));//16

        //replace(CharSequence target, CharSequence replacement) --string
        //String的父接口就是：CharSequence
        //将与字面目标序列匹配的字符串的每个子字符串替换为指定的字面替换序列。
        String newString = "http://baidu.com".replace("http://","https://");
        System.out.println(newString);

        //split(String regex) --String[]
        //拆分字符串
        String[] ymd= "1980-10-11".split("-");//以“-”的形式继续拆分
        for (int i = 0; i < ymd.length; i++) {
            System.out.println(ymd[i]);//1980  10  11
        }

        //startsWith(String prefix) --boolean
        //判断某个字符串是否以某个子字符串开始
        System.out.println("https".startsWith("h"));//ture

        //substring(int beginIndex) --String
        //返回一个字符串，该字符串是此字符串的子字符串。参数是起始下标beginIndex
        System.out.println("http://www.baidu.com".substring(7));


        //substring(int beginIndex, int endIndex) --String
        //返回一个字符串，该字符串是此字符串的子字符串。
        //参数是一个是起始下标，一个是结束下标,是左闭右开的
        System.out.println("http://www.baidu.com".substring(7,16));
        //www.baidu

        //toCharArray() --char[]
        //将此字符串转换为新的字符数组。
        char[] chars = "我是中国人".toCharArray();
        for (int i = 0; i < chars.length; i++) {
            System.out.print(chars[i]+ " ");//我 是 中 国 人

        }

        System.out.println();

        //toLowerCase() --String
        //使用默认语言环境的规则将此String中的所有字符都转换为小写
        System.out.println("ABC".toLowerCase());//abc


        //toUpperCase() -- String
        //转为大写
        System.out.println("abc".toUpperCase());//ABC


        //trim() -- String
        //返回忽略前导空白和尾部空白的字符串(中间空白不会去除)
        System.out.println("    hello   world  ".trim());


        //valueOf（boolean b）-- static String
        //String当中唯一一个静态方法
        //作用是将不是字符串的b转换成字符串
        String s2 = String.valueOf(true);
        System.out.println("true");//true
        //打印出来的true是字符串
        System.out.println(String.valueOf(100));//（字符串）100
        //这个静态的valueOf（），参数是一个对象的引用的时候，会自动调用对的toString方法吗？
        String s3 = String.valueOf(new Customer());
        System.out.println(s3);
        //底层是会调用toString方法的
        //没有重写toString方法之前，输出的对象的地址
        //如果重写了toString方法则valueOf底层回去调用对象的toString方法然后将其转换为String类型的数据
        //System.out.println（）这个方法在输出任何数据的时候都是先转换成字符串的，底层会去调用valueOf()方法
    }


}
class Customer{
    ;
}
